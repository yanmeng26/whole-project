{"version":3,"sources":["component/card/card.jsx","component/card-list/card-list.jsx","component/search-box/search-box.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","process","project","id","width","height","mode","name","href","link","CardList","projects","map","key","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","this","filteredProjects","filter","toLowerCase","includes","e","setState","target","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+TAGaA,G,MAAO,SAACC,GAAD,OACpB,yBAAKC,UAAY,kBAEb,yBAAKA,UAAY,WAAWC,IAAM,YAAYC,IAAKC,kBAAA,eAAgCJ,EAAMK,QAAQC,GAA9C,QAAwDC,MAAO,IAAKC,OAAQ,IAAMC,KAAK,QAC1I,4BAAKT,EAAMK,QAAQK,MACnB,+BAAI,uBAAGC,KAAOX,EAAMK,QAAQO,MAAOZ,EAAMK,QAAQO,UCLxCC,G,MAAW,SAAAb,GACpB,OAAO,yBAAKC,UAAY,aACpBD,EAAMc,SAASC,KAAI,SAAAV,GAAO,OAAG,kBAAC,EAAD,CAAMW,IAAOX,EAAQC,GAAID,QAAWA,UCD5DY,G,YAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OAErB,2BAAOlB,UAAY,SAASmB,KAAO,SAASF,YAAeA,EAC3DG,SAAYF,MC8DDG,E,YA/Db,aACC,IAAD,8BACE,+CACKC,MAAQ,CACXT,SAAS,CACP,CACEJ,KAAK,gBACLJ,GAAG,YACHM,KAAK,8CAER,CACEF,KAAK,YACLJ,GAAG,OACHM,KAAK,6CAEP,CACCF,KAAK,cACLJ,GAAG,UACHM,KAAK,2CAEP,CACEF,KAAK,cACLJ,GAAG,WACHM,KAAK,8CAEP,CACEF,KAAK,SACLJ,GAAG,SACHM,KAAK,0CAEP,CACEF,KAAK,YACLJ,GAAG,QACHM,KAAK,0CAGPY,YAAY,IAnChB,E,sEAwCC,IAAD,SACkCC,KAAKF,MAA/BT,EADR,EACQA,SAAUU,EADlB,EACkBA,YACVE,EAAmBZ,EAASa,QAAO,SAAAtB,GAAO,OAAIA,EAAQK,KAAKkB,cAAcC,SAASL,EAAYI,kBAClG,OACE,yBAAK3B,UAAY,OACf,gDACA,kBAAC,EAAD,CACIiB,YAAc,iBACdC,aAAgB,SAAAW,GAAC,OAAE,EAAKC,SAAU,CAACP,YAAYM,EAAEE,OAAOC,WAI9D,kBAAC,EAAD,CAAUnB,SAAWY,S,GAvDXQ,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2940ae93.chunk.js","sourcesContent":["import React from 'react'\nimport \"./card.css\"\n\nexport const Card = (props)=>(\n<div className = \"card-container\">\n    \n    <img className = \"card-img\" alt = \"Recruiter\" src={process.env.PUBLIC_URL +`/img/${props.project.id}.png`} width={400} height={300}  mode='fit'/>\n    <h2>{props.project.name}</h2>\n    <p> <a href ={props.project.link}>{props.project.link}</a></p>\n</div>\n\n\n)","import React from 'react';\nimport {Card} from '../card/card.jsx'\nimport './card-list.css'\nexport const CardList = props =>{\n    return <div className = 'card-list'>{\n        props.projects.map(project=>(<Card key = {project.id} project = {project}/>))\n                }</div>\n}","import React from'react';\nimport './search-box.css';\n\n\nexport const SearchBox = ({placeholder, handleChange})=>(\n\n    <input className = 'search' type = 'search' placeholder = {placeholder}\n    onChange = {handleChange} />\n)\n","import React,{Component} from 'react';\nimport {CardList} from './component/card-list/card-list.jsx'\nimport './App.css';\nimport {SearchBox} from'./component/search-box/search-box.jsx'\nclass App extends Component {\n\n  constructor()\n  {\n    super()\n    this.state = {\n      projects:[ \n        {\n          name:'The Recruiter',\n          id:'Recruiter',\n          link:'https://github.com/yanmeng26/The-Recruiter'\n        },\n       {\n         name:'Chat Room',\n         id:'Chat',\n         link:'https://meng-chat-room-app.herokuapp.com/'\n       },\n       {\n        name:'Weather App',\n        id:'Weather',\n        link:'https://meng-weather-app.herokuapp.com/'\n      },\n      {\n        name:'E-Commerce ',\n        id:'Commerce',\n        link:'https://meng-e-commerce-app.herokuapp.com/'\n      },\n      {\n        name:'Resume',\n        id:'Resume',\n        link:'https://meng-resume-app.herokuapp.com/'\n      },\n      {\n        name:'Other App',\n        id:'Other',\n        link:'https://meng-other-app.herokuapp.com/'\n      }\n      ],\n      searchField:\"\"\n    }\n  }\n\n  render()\n  {\n    const{projects, searchField } = this.state;\n    const filteredProjects = projects.filter(project => project.name.toLowerCase().includes(searchField.toLowerCase()))\n      return(\n        <div className = 'App'>\n          <h1> Meng's Projects</h1>\n          <SearchBox\n              placeholder = 'search project'\n              handleChange = {e=>this.setState ({searchField:e.target.value })}\n              />\n\n         \n        <CardList projects ={filteredProjects}>\n        \n          </CardList>\n          \n        </div>\n      )\n  }\n  \n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}